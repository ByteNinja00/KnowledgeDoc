apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
    kind: monitor
spec:
  replicas: 1
  minReadySeconds: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge:  25%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      name: prometheus
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus-server
          image: docker.io/prom/prometheus:v3.5.0
          imagePullPolicy: IfNotPresent
          command: ["/bin/prometheus"]
          args:
            - "--config.file=/etc/prometheus/prometheus-config.yaml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=24h"
            - "--web.enable-admin-api"
            - "--web.enable-lifecycle"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
          ports:
            - containerPort: 9090
              name: prom-http
          volumeMounts:
            - name: data
              mountPath: /prometheus
            - name: cm-volume
              mountPath: /etc/prometheus
          resources:
            limits:
              cpu: 2
              memory: "4Gi"
            requests:
              cpu: 0.5
              memory: "1Gi"
          livenessProbe:
            httpGet:
              port: 9090
              path: /-/healthy
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 2
            successThreshold: 1
          readinessProbe:
            httpGet:
              port: 9090
              path: /-/healthy
              scheme: HTTP
            initialDelaySeconds: 2
            timeoutSeconds: 3
            failureThreshold: 2
            successThreshold: 1
          securityContext:
            runAsUser: 0
      volumes:
        - name: data
          hostPath:
            path: /data/prometheus
        - name: cm-volume
          configMap:
            name: prometheus-config
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "kubernetes.io/hostname"
                    operator: In
                    values: ["vm-node-1"]